{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fragg\\\\OneDrive\\\\Escritorio\\\\rick_and_morty\\\\Client\\\\src\\\\components\\\\Detail\\\\Detail.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { DetailDiv, Hr, ImageDetail, Container, Title, Text, TextDiv } from \"./styledDetail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Detail() {\n  _s();\n  const {\n    id\n  } = useParams();\n\n  //*Crea un estado local con el nombre \"character\" que se inicialice como un objeto vac칤o\n  const [character, setCharacter] = useState({});\n  //TODO: NOTA游녢游낕este c칩digo es el que buscar치 al personaje de la API cada vez que el componente se monte. Y luego, cada vez que se desmonte, borrar치 su informaci칩n.\n  useEffect(() => {\n    axios(`https://rickandmortyapi.com/api/character/${id}`).then(({\n      data\n    }) => {\n      if (data.name) {\n        setCharacter(data);\n      } else {\n        window.alert(\"No hay personajes con ese ID\");\n      }\n    });\n\n    // No es necesario devolver setCharacter({}) aqu칤\n    // El retorno del useEffect solo debe utilizarse para realizar la limpieza de los efectos\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(DetailDiv, {\n      children: [/*#__PURE__*/_jsxDEV(TextDiv, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [\"Character ID: \", character.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Hr, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 5\n        }, this), character.name && /*#__PURE__*/_jsxDEV(Title, {\n          children: character.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 26\n        }, this), character.status && /*#__PURE__*/_jsxDEV(Text, {\n          children: [\"State: \", character.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 28\n        }, this), character.gender && /*#__PURE__*/_jsxDEV(Text, {\n          children: [\"Gender: \", character.gender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 28\n        }, this), character.origin && /*#__PURE__*/_jsxDEV(Text, {\n          children: [\"Origin: \", character.origin.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), character.image && /*#__PURE__*/_jsxDEV(ImageDetail, {\n        src: character.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Detail, \"6HTCr1TClwySIPkOyZ8puLIIZ9c=\", false, function () {\n  return [useParams];\n});\n_c = Detail;\nvar _c;\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["React","axios","useParams","useState","useEffect","DetailDiv","Hr","ImageDetail","Container","Title","Text","TextDiv","jsxDEV","_jsxDEV","Detail","_s","id","character","setCharacter","then","data","name","window","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","status","gender","origin","image","src","_c","$RefreshReg$"],"sources":["C:/Users/fragg/OneDrive/Escritorio/rick_and_morty/Client/src/components/Detail/Detail.jsx"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { DetailDiv,Hr, ImageDetail, Container, Title, Text,TextDiv } from \"./styledDetail\";\r\n\r\nexport default function Detail() {\r\n    const { id } = useParams();\r\n\r\n  //*Crea un estado local con el nombre \"character\" que se inicialice como un objeto vac칤o\r\n  const [character, setCharacter] = useState({});\r\n  //TODO: NOTA游녢游낕este c칩digo es el que buscar치 al personaje de la API cada vez que el componente se monte. Y luego, cada vez que se desmonte, borrar치 su informaci칩n.\r\n  useEffect(() => {\r\n    axios(`https://rickandmortyapi.com/api/character/${id}`).then(({ data }) => {\r\n      if (data.name) {\r\n        setCharacter(data);\r\n      } else {\r\n        window.alert(\"No hay personajes con ese ID\");\r\n      }\r\n    });\r\n\r\n    // No es necesario devolver setCharacter({}) aqu칤\r\n    // El retorno del useEffect solo debe utilizarse para realizar la limpieza de los efectos\r\n\r\n  }, [id]);\r\n\r\n  return (\r\n  \r\n    <Container>\r\n    <DetailDiv>\r\n    <TextDiv>\r\n    <Text>Character ID: {character.id}</Text>\r\n    <Hr/>\r\n      {character.name && <Title>{character.name}</Title>}\r\n      {character.status && <Text>State: {character.status}</Text>}\r\n      {character.gender && <Text>Gender: {character.gender}</Text>}\r\n      {character.origin && <Text>Origin: {character.origin.name}</Text>}\r\n      </TextDiv>\r\n      {character.image && <ImageDetail src={character.image}/>}\r\n      </DetailDiv>\r\n    </Container>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}